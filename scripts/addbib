#! /usr/bin/env python3
import json
import clipboard
from os.path import expanduser, join, exists, isfile, dirname
from os import makedirs

import bibtexparser
from bibtexparser.bparser import BibTexParser

initialized = False
copied_data = clipboard.paste()
conf = {}
conf_filepath = join(expanduser("~"), ".config","addbib", "config.json")

def get_id(content):
    try:
        # write to a temp file
        parser = BibTexParser()
        content = bibtexparser.loads(content)
        b_id = content.entries[0]["ID"]
        citation_command = "\\cite{}".format("{" + b_id + "}")
        clipboard.copy(citation_command)
        print("Copied citation command: {} to clipboard.".format(citation_command))
    except:
        print("Failed to parse citation key.")

# check for existence of config file
if not exists(conf_filepath):
    initialized = True
    print("Configuration file {} does not exist, creating.".format(conf_filepath))
    bib_filepath = input("Give path to bibliography file (you can copy/paste): ")
    if not exists(bib_filepath):
        print("Specified path does not exist.")
        exit(1)
    if not isfile(bib_filepath):
        print("Specified path is not a file.")
        exit(1)
    # populate configuration
    conf["bib_path"] = bib_filepath
    # write config file for addbib
    conf_dir = dirname(conf_filepath)
    if not exists(conf_dir):
        print("Creating configuration directory to {}".format(conf_dir))
        makedirs(dirname(conf_filepath))
    print("Writing configuration to {}".format(conf_filepath))
    with open(conf_filepath, "w") as f:
        json.dump(conf, f)
else:
    with open(conf_filepath, "r") as f:
        conf = json.load(f)
        bib_filepath = conf["bib_path"]

print("Library:", bib_filepath)

if not exists(bib_filepath):
    print("Warning: bib file is empty.")

with open(bib_filepath, "a") as f:
    print("Adding content to library:")
    print("------------------------")
    print(copied_data)
    print("------------------------")
    if initialized:
        res = input("Continue? Y/n")
        if res.lower() == "n":
            print("Aborting.")
            exit(1)
    f.write("\n")
    f.write(copied_data)
    f.write("\n")
    print("Added.")
    get_id(copied_data)
